import { AnyShapeStyle, StrokeStyle } from "./configs";
import { LinePosition, Position } from "./types";
import * as V from "../common/vector";
interface Line {
    source: Position;
    target: Position;
}
/**
 * Convert `LinePosition` to list of `Position`
 * @param line `LinePosition` instance
 * @returns list of `Position` instance
 */
export declare function lineTo2Positions(line: LinePosition): [Position, Position];
/**
 * Convert two `Position` to `LinePosition`
 * @param p1 source position of the line
 * @param p2 target position of the line
 * @returns `LinePosition` instance
 */
export declare function positionsToLinePosition(p1: Position, p2: Position): LinePosition;
/**
 * Calculate the intersection of a line and a circle.
 * @param line line
 * @param targetSide side of the line where the node is located. true: target side, false: source side
 * @param center center of the circle
 * @param radius radius of the circle
 * @returns intersection point
 */
export declare function getIntersectionOfLineAndCircle(line: Line, targetSide: boolean, center: Position, radius: number): Position | null;
/**
 * Calculate the intersection of two lines.
 * @param line1 line 1
 * @param line2 line 2
 * @returns intersection point
 */
export declare function getIntersectionPointOfLines(line1: Line, line2: Line): Position;
/**
 * Calculate whether a point is contained in a circle.
 * @param point point
 * @param center center of the circle
 * @param radius radius of the circle
 * @returns whether point is contained in a circle
 */
export declare function isPointContainedInCircle(point: Position, center: Position, radius: number): boolean;
/**
 * Calculate the distance of the line.
 * @param line line
 * @returns distance
 */
export declare function calculateDistance(line: LinePosition): number;
/**
 * Calculate the position to display the edge label from the
 * positions of the edge.
 * @param linePos line segment between the outermost of the nodes
 * @param edgeStyle stroke style of edges
 * @param margin margin from line
 * @param padding padding from outside
 * @param scale scale factor
 * @returns edge label display area
 */
export declare function calculateEdgeLabelArea(linePos: LinePosition, edgeStyle: StrokeStyle, margin: number, padding: number, scale: number): {
    source: {
        above: Position;
        below: Position;
    };
    target: {
        above: Position;
        below: Position;
    };
};
/**
 * Calculate the distances between center of node and edge of node.
 * @param sourceNodePos position of source node
 * @param targetNodePos position of target node
 * @param sourceNodeShape shape config of source node
 * @param targetNodeShape shape config of target node
 * @returns the distances
 */
export declare function calculateDistancesFromCenterOfNodeToEndOfNode(sourceNodePos: Position, targetNodePos: Position, sourceNodeShape: AnyShapeStyle, targetNodeShape: AnyShapeStyle): [number, number];
/**
 * Calculates the line position to which the margin is applied.
 * @param linePos original position of the line
 * @param sourceMargin margin for source side
 * @param targetMargin margin for target side
 * @returns the line position
 */
export declare function applyMarginToLine(linePos: LinePosition, sourceMargin: number, targetMargin: number): LinePosition;
/**
 * Calculates the position of a given distance along the circumference.
 * @param pos original position
 * @param center center of the circle
 * @param radian radius of the circle
 * @returns the moved position
 */
export declare function moveOnCircumference(pos: Position, center: Position, radian: number): {
    x: number;
    y: number;
};
/**
 * Reverse the direction of the angle.
 * @param theta angle
 * @returns reversed angle
 */
export declare function reverseAngleRadian(theta: number): number;
export declare function inverseLine(line: LinePosition): LinePosition;
export declare function calculateBezierCurveControlPoint(p1: V.Vector, center: V.Vector, p2: V.Vector, theta0: number): V.Vector[];
export {};
