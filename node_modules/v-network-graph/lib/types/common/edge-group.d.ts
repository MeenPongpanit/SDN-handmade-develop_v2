import { Reactive } from "./common";
import { Configs, EdgeKeepOrderType } from "./configs";
import { Edge, Edges, LinePosition, Nodes, Position } from "./types";
interface EdgeLayoutPoint {
    edge: Edge;
    pointInGroup: number;
    groupWidth: number;
}
export interface EdgeGroup {
    edges: Edges;
    groupWidth: number;
    summarize: boolean;
}
export interface EdgeGroupStates {
    edgeLayoutPoints: Record<string, EdgeLayoutPoint>;
    edgeGroups: Record<string, EdgeGroup>;
    summarizedEdges: Record<string, true>;
}
/**
 * Make the states for edge group.
 * @param nodes nodes
 * @param edges edges
 * @param configs configs
 * @returns the states object for edge group
 */
export declare function makeEdgeGroupStates(nodes: Readonly<Nodes>, edges: Readonly<Edges>, configs: Readonly<Configs>): Reactive<EdgeGroupStates>;
/**
 * Calculate the edge position by applying a shift.
 * @param p relative layout information of edges
 * @param isSummarized summarize or not
 * @param source position of source node
 * @param target position of target node
 * @param scale scale factor
 * @param keepOrder edge positional type config
 * @returns the edge position by applying a shift
 */
export declare function calculateEdgeShiftedPosition(p: EdgeLayoutPoint, isSummarized: boolean, source: Position, target: Position, scale: number, keepOrder: EdgeKeepOrderType): LinePosition;
export {};
