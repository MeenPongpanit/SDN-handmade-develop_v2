import { RecursivePartial } from "./common";
export interface Node {
    name?: string;
    [x: string]: any;
}
export declare type Nodes = Record<string, Node>;
export interface Edge {
    source: string;
    target: string;
    [x: string]: any;
}
export declare type Edges = Record<string, Edge>;
export interface LinePosition {
    x1: number;
    y1: number;
    x2: number;
    y2: number;
}
export declare type LayerPosition = "paths" | "nodes" | "focusring" | "edges" | "base" | "grid" | "background" | "root";
export declare const LayerPositions: readonly LayerPosition[];
export declare type Layers = Record<string, LayerPosition>;
export interface Position {
    x: number;
    y: number;
}
export interface Size {
    width: number;
    height: number;
}
export interface FixablePosition extends Position {
    fixed?: boolean;
}
export declare type NodePositions = Record<string, FixablePosition>;
export interface Layouts {
    nodes: NodePositions;
}
/** ユーザ指定用 optionalな指定のためのinterface */
export declare type UserLayouts = RecursivePartial<Layouts>;
export interface EdgeLabelArea {
    source: {
        above: Position;
        below: Position;
    };
    target: {
        above: Position;
        below: Position;
    };
}
export interface Path {
    edges: string[];
    [x: string]: any;
}
export declare type Paths = Path[];
export declare type PositionOrCurve = Position | Position[] | null;
export declare type NodePointerEvent = {
    node: string;
    event: PointerEvent;
};
export declare type EdgePointerEvent = {
    edge: string;
    event: PointerEvent;
};
export declare type Events = {
    "view:load": undefined;
    "view:unload": undefined;
    "view:mode": "default" | "node" | "edge";
    "view:zoom": number;
    "view:pan": {
        x: number;
        y: number;
    };
    "view:fit": undefined;
    "view:resize": {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    "node:click": NodePointerEvent;
    "node:pointerover": NodePointerEvent;
    "node:pointerout": NodePointerEvent;
    "node:pointerup": NodePointerEvent;
    "node:pointerdown": NodePointerEvent;
    "node:dragstart": {
        [name: string]: Position;
    };
    "node:pointermove": {
        [name: string]: Position;
    };
    "node:dragend": {
        [name: string]: Position;
    };
    "node:select": string[];
    "edge:pointerup": EdgePointerEvent;
    "edge:pointerdown": EdgePointerEvent;
    "edge:click": EdgePointerEvent;
    "edge:pointerover": EdgePointerEvent;
    "edge:pointerout": EdgePointerEvent;
    "edge:select": string[];
    "path:click": Path;
};
export declare type EventHandlers = {
    "*"?: <T extends keyof Events>(type: T, event: Events[T]) => void;
} & {
    [K in keyof Events]?: (event: Events[K]) => void;
};
export declare type OnClickHandler = (param: NodePointerEvent) => void;
export declare type OnDragHandler = (param: {
    [name: string]: Position;
}) => void;
export interface Point {
    x: number;
    y: number;
}
export interface Sizes {
    width: number;
    height: number;
    viewBox: {
        x: number;
        y: number;
        width: number;
        height: number;
    };
}
