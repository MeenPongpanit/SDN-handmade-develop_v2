import { Node, Position, Size } from "./types";
import { NodeConfig } from "./configs";
export declare function keyOf<T>(obj: T): (keyof T)[];
export declare function entriesOf<T, K extends keyof T>(obj: T): [K, T[K]][];
export declare function updateObjectDiff<T extends Record<string, any>>(target: T, from: T): void;
export declare function getNodeSize(node: Node, style: NodeConfig, scale: number): Size;
export declare function areNodesCollision(nodePos: Position, nodeSize: Size, targetNodePos: Position, targetNodeSize: Size): boolean;
export declare function applyScaleToDasharray(dasharray: number | string | undefined, scale: number): string | number | undefined;
export declare function getDasharrayUnit(dasharray: number | string | undefined): number;
export declare class MapUtil {
    static valueOf<K, V>(map: Map<K, V>): V[];
}
declare type Args<T> = [...(T | null)[], T];
export declare function findFirstNonNull<T>(...values: Args<T>): T;
export {};
