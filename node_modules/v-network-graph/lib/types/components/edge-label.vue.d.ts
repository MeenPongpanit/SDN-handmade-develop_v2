import type { DefineComponent, ComputedRef, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, PropType,  Ref } from 'vue';
import type { LabelStyle, EdgeLabelStyle } from '../common/configs';
import { Edge, EdgeLabelArea } from "../common/types";
declare const _sfc_main: DefineComponent<{
    area: {
        type: PropType<EdgeLabelArea>;
        required: true;
    };
    config: {
        type: PropType<EdgeLabelStyle>;
        required: true;
    };
    text: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    align: {
        type: PropType<"source" | "target" | "center">;
        required: false;
        default: string;
    };
    verticalAlign: {
        type: PropType<"center" | "above" | "below">;
        required: false;
        default: string;
    };
    edge: {
        type: PropType<Edge>;
        required: false;
        default: undefined;
    };
    hovered: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    selected: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    scale: {
        type: NumberConstructor;
        required: false;
        default: undefined;
    };
}, {
    props: Readonly<{
        selected: boolean;
        hovered: boolean;
        edge: Edge | undefined;
        scale: number | undefined;
        text: string;
        config: EdgeLabelStyle;
        area: EdgeLabelArea;
        align: "source" | "target" | "center";
        verticalAlign: "center" | "above" | "below";
    }>;
    x: Ref<number>;
    y: Ref<number>;
    textAnchor: Ref<"middle" | "start" | "end">;
    dominantBaseline: Ref<"text-top" | "hanging" | "central">;
    angle: Ref<number>;
    updatedConfig: ComputedRef<EdgeLabelStyle>;
    VText: DefineComponent<{
        text: {
            type: StringConstructor;
            required: true;
        };
        x: {
            type: NumberConstructor;
            required: true;
        };
        y: {
            type: NumberConstructor;
            required: true;
        };
        config: {
            type: PropType<LabelStyle>;
            required: true;
        };
    }, {
        updateBackgroundPosition: (element: SVGTextElement, pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        }, transform: Ref<string | undefined>) => void;
        enableMutationObserver: (element: SVGTextElement, pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        }, transform: Ref<string | undefined>) => MutationObserver;
        props: Readonly<{
            text: string;
            config: LabelStyle;
            x: number;
            y: number;
        }>;
        attrs: {
            [x: string]: unknown;
        };
        scale: Ref<number>;
        texts: ComputedRef<string[]>;
        fontSize: ComputedRef<number>;
        lineHeight: ComputedRef<number>;
        topDeltaY: ComputedRef<number>;
        element: Ref<SVGTextElement | undefined>;
        transform: Ref<string>;
        pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        };
        backgroundRectPos: ComputedRef<{
            x: number;
            y: number;
            width: number;
            height: number;
        }>;
        observer: MutationObserver | undefined;
        updateObserver: () => void;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<{
        text?: unknown;
        x?: unknown;
        y?: unknown;
        config?: unknown;
    } & {
        text: string;
        config: LabelStyle;
        x: number;
        y: number;
    } & {}>, {}>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<{
    area?: unknown;
    config?: unknown;
    text?: unknown;
    align?: unknown;
    verticalAlign?: unknown;
    edge?: unknown;
    hovered?: unknown;
    selected?: unknown;
    scale?: unknown;
} & {
    selected: boolean;
    hovered: boolean;
    text: string;
    config: EdgeLabelStyle;
    area: EdgeLabelArea;
    align: "source" | "target" | "center";
    verticalAlign: "center" | "above" | "below";
} & {
    edge?: Edge | undefined;
    scale?: number | undefined;
}>, {
    selected: boolean;
    hovered: boolean;
    edge: Edge;
    scale: number;
    text: string;
    align: "source" | "target" | "center";
    verticalAlign: "center" | "above" | "below";
}>;
export default _sfc_main;
