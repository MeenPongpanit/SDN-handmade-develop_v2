import type { EdgeGroupStates, EdgeGroup } from '../common/edge-group';
import type { NodeStates, EdgeStates } from '../composables/state';
import type { DefineComponent, Ref, ComputedRef, ComponentOptionsMixin, EmitsOptions, VNodeProps, AllowedComponentProps, ComponentCustomProps } from 'vue';
import type { Edge, Layouts, FixablePosition, Position } from '../common/types';
import type { EdgeConfig, ShapeType, AnyShapeStyle,  StrokeStyle } from '../common/configs';
interface NodeShape {
    pos: Position;
    shape: AnyShapeStyle;
}
declare const _sfc_main: DefineComponent<{}, {
    edgeConfig: EdgeConfig<Edge>;
    nodeStates: NodeStates;
    edgeStates: EdgeStates;
    edgeGroupStates: EdgeGroupStates;
    layouts: Layouts;
    scale: Ref<number>;
    indivisualEdgeGroups: ComputedRef<{
        [k: string]: EdgeGroup;
    }>;
    labelAreaPosition: ComputedRef<(edgeId: string, source: NodeShape, target: NodeShape, edgeStyle: StrokeStyle) => {
        source: {
            above: Position;
            below: Position;
        };
        target: {
            above: Position;
            below: Position;
        };
    }>;
    nodeShape: ComputedRef<(node: string) => {
        pos: FixablePosition;
        shape: {
            type: ShapeType;
            radius: number;
            strokeWidth: number;
            strokeColor?: string | undefined;
            strokeDasharray?: string | number | undefined;
            color: string;
            width: number;
            height: number;
            borderRadius: number;
        };
    }>;
}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, EmitsOptions, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<{} & {} & {}>, {}>;
export default _sfc_main;
