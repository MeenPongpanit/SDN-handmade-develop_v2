import type { EdgeStates } from '../composables/state';
import type { EdgeConfig, StrokeStyle, AnyShapeStyle, LabelStyle } from '..';
import type { DefineComponent, Ref, ComputedRef, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, PropType } from 'vue';
import type { Edge, Edges,  NodePositions } from '../common/types';
declare const _sfc_main: DefineComponent<{
    edges: {
        type: PropType<Edges>;
        required: true;
    };
    layouts: {
        type: PropType<NodePositions>;
        required: true;
    };
}, {
    props: Readonly<{
        layouts: NodePositions;
        edges: Edges;
    }>;
    config: EdgeConfig<Edge>;
    edgeStates: EdgeStates;
    pos: Ref<{
        x1: number;
        y1: number;
        x2: number;
        y2: number;
    }>;
    centerPos: Ref<{
        x: number;
        y: number;
    }>;
    VLine: DefineComponent<{
        x1: {
            type: NumberConstructor;
            required: true;
        };
        y1: {
            type: NumberConstructor;
            required: true;
        };
        x2: {
            type: NumberConstructor;
            required: true;
        };
        y2: {
            type: NumberConstructor;
            required: true;
        };
        config: {
            type: PropType<StrokeStyle>;
            required: true;
        };
    }, {
        props: Readonly<{
            config: StrokeStyle;
            x1: number;
            y1: number;
            x2: number;
            y2: number;
        }>;
        scale: Ref<number>;
        strokeWidth: ComputedRef<number>;
        strokeDasharray: ComputedRef<string | number | undefined>;
        animationSpeed: ComputedRef<string | undefined>;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<{
        x1?: unknown;
        y1?: unknown;
        x2?: unknown;
        y2?: unknown;
        config?: unknown;
    } & {
        config: StrokeStyle;
        x1: number;
        y1: number;
        x2: number;
        y2: number;
    } & {}>, {}>;
    VShape: DefineComponent<{
        baseX: {
            type: NumberConstructor;
            default: number;
        };
        baseY: {
            type: NumberConstructor;
            default: number;
        };
        config: {
            type: PropType<AnyShapeStyle>;
            required: true;
        };
    }, {
        props: Readonly<{
            baseX: number;
            baseY: number;
            config: AnyShapeStyle;
        }>;
        scale: Ref<number>;
        x: Ref<number>;
        y: Ref<number>;
        strokeWidth: Ref<number>;
        strokeColor: Ref<string>;
        strokeDasharray: Ref<string | number | undefined>;
        radius: Ref<number>;
        width: Ref<number>;
        height: Ref<number>;
        borderRadius: Ref<number>;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<{
        baseX?: unknown;
        baseY?: unknown;
        config?: unknown;
    } & {
        baseX: number;
        baseY: number;
        config: AnyShapeStyle;
    } & {}>, {
        baseX: number;
        baseY: number;
    }>;
    VText: DefineComponent<{
        text: {
            type: StringConstructor;
            required: true;
        };
        x: {
            type: NumberConstructor;
            required: true;
        };
        y: {
            type: NumberConstructor;
            required: true;
        };
        config: {
            type: PropType<LabelStyle>;
            required: true;
        };
    }, {
        updateBackgroundPosition: (element: SVGTextElement, pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        }, transform: Ref<string | undefined>) => void;
        enableMutationObserver: (element: SVGTextElement, pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        }, transform: Ref<string | undefined>) => MutationObserver;
        props: Readonly<{
            text: string;
            config: LabelStyle;
            x: number;
            y: number;
        }>;
        attrs: {
            [x: string]: unknown;
        };
        scale: Ref<number>;
        texts: ComputedRef<string[]>;
        fontSize: ComputedRef<number>;
        lineHeight: ComputedRef<number>;
        topDeltaY: ComputedRef<number>;
        element: Ref<SVGTextElement | undefined>;
        transform: Ref<string>;
        pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        };
        backgroundRectPos: ComputedRef<{
            x: number;
            y: number;
            width: number;
            height: number;
        }>;
        observer: MutationObserver | undefined;
        updateObserver: () => void;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<{
        text?: unknown;
        x?: unknown;
        y?: unknown;
        config?: unknown;
    } & {
        text: string;
        config: LabelStyle;
        x: number;
        y: number;
    } & {}>, {}>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<{
    edges?: unknown;
    layouts?: unknown;
} & {
    layouts: NodePositions;
    edges: Edges;
} & {}>, {}>;
export default _sfc_main;
