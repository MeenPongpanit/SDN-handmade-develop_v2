import type { DefineComponent, ComputedRef, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, PropType,  Ref } from 'vue';
import { LabelStyle } from "../common/configs";
declare type Rect = {
    x: number;
    y: number;
    width: number;
    height: number;
};
declare const _sfc_main: DefineComponent<{
    text: {
        type: StringConstructor;
        required: true;
    };
    x: {
        type: NumberConstructor;
        required: true;
    };
    y: {
        type: NumberConstructor;
        required: true;
    };
    config: {
        type: PropType<LabelStyle>;
        required: true;
    };
}, {
    updateBackgroundPosition: (element: SVGTextElement, pos: Rect, transform: Ref<string | undefined>) => void;
    enableMutationObserver: (element: SVGTextElement, pos: Rect, transform: Ref<string | undefined>) => MutationObserver;
    props: Readonly<{
        text: string;
        config: LabelStyle;
        x: number;
        y: number;
    }>;
    attrs: {
        [x: string]: unknown;
    };
    scale: Ref<number>;
    texts: ComputedRef<string[]>;
    fontSize: ComputedRef<number>;
    lineHeight: ComputedRef<number>;
    topDeltaY: ComputedRef<number>;
    element: Ref<SVGTextElement | undefined>;
    transform: Ref<string>;
    pos: {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    backgroundRectPos: ComputedRef<{
        x: number;
        y: number;
        width: number;
        height: number;
    }>;
    observer: MutationObserver | undefined;
    updateObserver: () => void;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<{
    text?: unknown;
    x?: unknown;
    y?: unknown;
    config?: unknown;
} & {
    text: string;
    config: LabelStyle;
    x: number;
    y: number;
} & {}>, {}>;
export default _sfc_main;
