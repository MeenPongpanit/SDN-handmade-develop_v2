import type { HeadMarker } from '../composables/marker';
import type { NodeStates } from '../composables/state';
import type { SvgPanZoomInstance } from '../utility/svg-pan-zoom-ex';
import type { Configs } from '../common/configs';
import type { DefineComponent, Ref, ComputedRef, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, PropType } from 'vue';
import type { Node, Edge, Path, EventHandlers,  Nodes,  Edges,  Paths,  Layouts } from '../common/types';
import { Layers, LayerPosition, Point, Sizes } from "../common/types";
import type { RecursivePartial, Reactive } from '../common/common';
declare const _default: DefineComponent<{
    nodes: {
        type: PropType<Nodes>;
        default: () => {};
    };
    edges: {
        type: PropType<Edges>;
        default: () => {};
    };
    layouts: {
        type: PropType<RecursivePartial<Layouts>>;
        default: () => {};
    };
    zoomLevel: {
        type: NumberConstructor;
        default: number;
    };
    selectedNodes: {
        type: PropType<string[]>;
        default: () => never[];
    };
    selectedEdges: {
        type: PropType<string[]>;
        default: () => never[];
    };
    configs: {
        type: PropType<RecursivePartial<Configs<Node, Edge, Path>>>;
        default: () => {};
    };
    paths: {
        type: PropType<Paths>;
        default: () => never[];
    };
    layers: {
        type: PropType<Layers>;
        default: () => {};
    };
    eventHandlers: {
        type: PropType<EventHandlers>;
        default: () => {};
    };
}, {
    container: Ref<HTMLDivElement | undefined>;
    svg: Ref<SVGElement | undefined>;
    show: Ref<boolean>;
    svgPanZoom: Ref<SvgPanZoomInstance | undefined>;
    allConfigs: Configs<Node, Edge, Path>;
    layerDefs: ComputedRef<Record<LayerPosition, string[]>>;
    isShowGrid: ComputedRef<boolean>;
    isShowBackgroundViewport: ComputedRef<boolean>;
    overrideNodes: ComputedRef<boolean>;
    overrideNodeLabels: ComputedRef<boolean>;
    overrideEdgeLabels: ComputedRef<boolean>;
    scale: ComputedRef<number>;
    nodeStates: NodeStates;
    currentSelectedNodes: Reactive<Set<string>>;
    markers: Record<string, HeadMarker>;
    dragging: Ref<boolean>;
    currentLayouts: Reactive<Layouts>;
    visibleNodeFocusRing: ComputedRef<boolean>;
    visiblePaths: ComputedRef<boolean>;
    fitToContents: () => void;
    panToCenter: () => void;
}, unknown, {}, {
    /**
     * Zoom in
     */
    zoomIn(): void;
    /**
     * Zoom out
     */
    zoomOut(): void;
    /**
     * Pan to a rendered position
     * @return {Point} point to pan
     */
    panTo(point: Point): void;
    /**
     * Relatively pan the graph by a specified rendered position vector
     * @return {Point} relative point to pan
     */
    panBy(point: Point): void;
    /**
     * Get pan vector
     * @return {Point} pan vector
     */
    getPan(): Point;
    /**
     * Get all calculate svg dimensions
     */
    getSizes(): Sizes;
    /**
     * Get graph as SVG text.
     * @return {string} SVG text
     */
    getAsSvg(): string;
}, ComponentOptionsMixin, ComponentOptionsMixin, ("update:zoomLevel" | "update:selectedNodes" | "update:selectedEdges" | "update:layouts")[], "update:zoomLevel" | "update:selectedNodes" | "update:selectedEdges" | "update:layouts", VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<{
    nodes?: unknown;
    edges?: unknown;
    layouts?: unknown;
    zoomLevel?: unknown;
    selectedNodes?: unknown;
    selectedEdges?: unknown;
    configs?: unknown;
    paths?: unknown;
    layers?: unknown;
    eventHandlers?: unknown;
} & {
    layouts: RecursivePartial<Layouts>;
    edges: Edges;
    paths: Paths;
    nodes: Nodes;
    zoomLevel: number;
    selectedNodes: string[];
    selectedEdges: string[];
    configs: RecursivePartial<Configs<Node, Edge, Path>>;
    layers: Layers;
    eventHandlers: EventHandlers;
} & {}> & {
    "onUpdate:zoomLevel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedNodes"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedEdges"?: ((...args: any[]) => any) | undefined;
    "onUpdate:layouts"?: ((...args: any[]) => any) | undefined;
}, {
    layouts: RecursivePartial<Layouts>;
    edges: Edges;
    paths: Paths;
    nodes: Nodes;
    zoomLevel: number;
    selectedNodes: string[];
    selectedEdges: string[];
    configs: RecursivePartial<Configs<Node, Edge, Path>>;
    layers: Layers;
    eventHandlers: EventHandlers;
}>;
export default _default;
