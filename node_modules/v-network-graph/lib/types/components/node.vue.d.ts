import type { DefineComponent, ComputedRef, Ref, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, PropType } from 'vue';
import type { Node, Position } from '../common/types';
import type { ShapeType, NodeConfig, AnyShapeStyle, LabelStyle, NodeLabelDirection } from '../common/configs';
declare const _sfc_main: DefineComponent<{
    id: {
        type: StringConstructor;
        required: true;
    };
    state: {
        type: PropType<{
            shape: {
                type: ShapeType;
                radius: number;
                strokeWidth: number;
                strokeColor?: string | undefined;
                strokeDasharray?: string | number | undefined;
                color: string;
                width: number;
                height: number;
                borderRadius: number;
            };
            staticShape: {
                type: ShapeType;
                radius: number;
                strokeWidth: number;
                strokeColor?: string | undefined;
                strokeDasharray?: string | number | undefined;
                color: string;
                width: number;
                height: number;
                borderRadius: number;
            };
            label: {
                visible: boolean;
                margin: number;
                direction: NodeLabelDirection;
                text: string;
                fontFamily?: string | undefined;
                fontSize: number;
                color: string;
                background?: {
                    visible: boolean;
                    color?: string | undefined;
                    padding?: number | {
                        vertical: number;
                        horizontal: number;
                    } | undefined;
                    borderRadius?: number | undefined;
                } | undefined;
                lineHeight: number;
            };
            labelText: string;
            selected: boolean;
            hovered: boolean;
            draggable: boolean;
            selectable: number | boolean;
        }>;
        required: true;
    };
    pos: {
        type: PropType<Position>;
        required: false;
        default: undefined;
    };
}, {
    props: Readonly<{
        id: string;
        state: {
            shape: {
                type: ShapeType;
                radius: number;
                strokeWidth: number;
                strokeColor?: string | undefined;
                strokeDasharray?: string | number | undefined;
                color: string;
                width: number;
                height: number;
                borderRadius: number;
            };
            staticShape: {
                type: ShapeType;
                radius: number;
                strokeWidth: number;
                strokeColor?: string | undefined;
                strokeDasharray?: string | number | undefined;
                color: string;
                width: number;
                height: number;
                borderRadius: number;
            };
            label: {
                visible: boolean;
                margin: number;
                direction: NodeLabelDirection;
                text: string;
                fontFamily?: string | undefined;
                fontSize: number;
                color: string;
                background?: {
                    visible: boolean;
                    color?: string | undefined;
                    padding?: number | {
                        vertical: number;
                        horizontal: number;
                    } | undefined;
                    borderRadius?: number | undefined;
                } | undefined;
                lineHeight: number;
            };
            labelText: string;
            selected: boolean;
            hovered: boolean;
            draggable: boolean;
            selectable: number | boolean;
        };
        pos: Position | undefined;
    }>;
    x: ComputedRef<number>;
    y: ComputedRef<number>;
    config: NodeConfig<Node>;
    scale: Ref<number>;
    handleNodePointerDownEvent: (node: string, event: PointerEvent) => void;
    handleNodePointerOverEvent: (node: string, event: PointerEvent) => void;
    handleNodePointerOutEvent: (node: string, event: PointerEvent) => void;
    labelVisibility: ComputedRef<string | false>;
    labelMargin: ComputedRef<number>;
    labelShiftV: Ref<number>;
    labelShiftH: Ref<number>;
    labelDiagonalShiftV: Ref<number>;
    labelDiagonalShiftH: Ref<number>;
    textAnchor: ComputedRef<"middle" | "start" | "end">;
    dominantBaseline: ComputedRef<"text-top" | "hanging" | "central">;
    labelX: ComputedRef<number>;
    labelY: ComputedRef<number>;
    VShape: DefineComponent<{
        baseX: {
            type: NumberConstructor;
            default: number;
        };
        baseY: {
            type: NumberConstructor;
            default: number;
        };
        config: {
            type: PropType<AnyShapeStyle>;
            required: true;
        };
    }, {
        props: Readonly<{
            baseX: number;
            baseY: number;
            config: AnyShapeStyle;
        }>;
        scale: Ref<number>;
        x: Ref<number>;
        y: Ref<number>;
        strokeWidth: Ref<number>;
        strokeColor: Ref<string>;
        strokeDasharray: Ref<string | number | undefined>;
        radius: Ref<number>;
        width: Ref<number>;
        height: Ref<number>;
        borderRadius: Ref<number>;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<{
        baseX?: unknown;
        baseY?: unknown;
        config?: unknown;
    } & {
        baseX: number;
        baseY: number;
        config: AnyShapeStyle;
    } & {}>, {
        baseX: number;
        baseY: number;
    }>;
    VText: DefineComponent<{
        text: {
            type: StringConstructor;
            required: true;
        };
        x: {
            type: NumberConstructor;
            required: true;
        };
        y: {
            type: NumberConstructor;
            required: true;
        };
        config: {
            type: PropType<LabelStyle>;
            required: true;
        };
    }, {
        updateBackgroundPosition: (element: SVGTextElement, pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        }, transform: Ref<string | undefined>) => void;
        enableMutationObserver: (element: SVGTextElement, pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        }, transform: Ref<string | undefined>) => MutationObserver;
        props: Readonly<{
            text: string;
            config: LabelStyle;
            x: number;
            y: number;
        }>;
        attrs: {
            [x: string]: unknown;
        };
        scale: Ref<number>;
        texts: ComputedRef<string[]>;
        fontSize: ComputedRef<number>;
        lineHeight: ComputedRef<number>;
        topDeltaY: ComputedRef<number>;
        element: Ref<SVGTextElement | undefined>;
        transform: Ref<string>;
        pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        };
        backgroundRectPos: ComputedRef<{
            x: number;
            y: number;
            width: number;
            height: number;
        }>;
        observer: MutationObserver | undefined;
        updateObserver: () => void;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<{
        text?: unknown;
        x?: unknown;
        y?: unknown;
        config?: unknown;
    } & {
        text: string;
        config: LabelStyle;
        x: number;
        y: number;
    } & {}>, {}>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<{
    id?: unknown;
    state?: unknown;
    pos?: unknown;
} & {
    id: string;
    state: {
        shape: {
            type: ShapeType;
            radius: number;
            strokeWidth: number;
            strokeColor?: string | undefined;
            strokeDasharray?: string | number | undefined;
            color: string;
            width: number;
            height: number;
            borderRadius: number;
        };
        staticShape: {
            type: ShapeType;
            radius: number;
            strokeWidth: number;
            strokeColor?: string | undefined;
            strokeDasharray?: string | number | undefined;
            color: string;
            width: number;
            height: number;
            borderRadius: number;
        };
        label: {
            visible: boolean;
            margin: number;
            direction: NodeLabelDirection;
            text: string;
            fontFamily?: string | undefined;
            fontSize: number;
            color: string;
            background?: {
                visible: boolean;
                color?: string | undefined;
                padding?: number | {
                    vertical: number;
                    horizontal: number;
                } | undefined;
                borderRadius?: number | undefined;
            } | undefined;
            lineHeight: number;
        };
        labelText: string;
        selected: boolean;
        hovered: boolean;
        draggable: boolean;
        selectable: number | boolean;
    };
} & {
    pos?: Position | undefined;
}>, {
    pos: Position;
}>;
export default _sfc_main;
