import type { Emitter } from 'mitt';
import type { DefineComponent, Ref, ComputedRef, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, PropType } from 'vue';
import type { Layouts, Events, Edge,  Edges,  NodePositions,  Path,  Paths,  PositionOrCurve } from '../common/types';
import { EdgeStates, NodeStates, EdgeState, Curve } from "../composables/state";
import type { PathConfig, PathStrokeStyle, AnyShapeStyle,  PathEndType } from '../common/configs';
import * as V from "../common/vector";
interface EdgeObject {
    edgeId: string;
    edge: Edge;
}
interface PathObject {
    path: Path;
    edges: EdgeObject[];
}
interface EdgeLine {
    edgeId: string;
    source: string;
    target: string;
    line: V.Line;
    curve?: Curve;
}
declare const _sfc_main: DefineComponent<{
    paths: {
        type: PropType<Paths>;
        required: true;
    };
    edges: {
        type: PropType<Edges>;
        required: true;
    };
}, {
    EPSILON: number;
    props: Readonly<{
        edges: Edges;
        paths: Paths;
    }>;
    pathConfig: PathConfig<Path>;
    nodeStates: NodeStates;
    edgeStates: EdgeStates;
    layouts: Layouts;
    scale: Ref<number>;
    emitter: Emitter<Events>;
    pathList: ComputedRef<PathObject[]>;
    calcPathPoints: ComputedRef<(path: PathObject) => PositionOrCurve[]>;
    emitPathClicked: (path: Path) => void;
    _calculatePathPoints: (path: PathObject, nodeStates: NodeStates, nodeLayouts: NodePositions, edgeStates: EdgeStates, scale: number, curveInNode: boolean, pathEndType: PathEndType, margin: number) => PositionOrCurve[];
    _getNodeRadius: (shape: AnyShapeStyle) => number;
    _detectDirectionsOfPathEdges: (edges: EdgeObject[]) => boolean[];
    _calculateEdgeOfNode: (edge: EdgeLine, nodeRadius: number, nodeLayouts: NodePositions, direction: boolean) => V.Vector;
    _getIntersectionOfLines: (prev: EdgeLine, next: EdgeLine, nodePos: V.Vector) => V.Vector | null;
    _getIntersectionOfLineAndNode: (edge: EdgeLine, nodeCenter: V.Vector, nodeRadius: number, targetSide: boolean) => V.Vector | null;
    _getEdgeLine: (edge: EdgeObject, direction: boolean, state: EdgeState) => EdgeLine;
    _getSlope: (pos: V.Line) => number;
    VPathLine: DefineComponent<{
        points: {
            type: PropType<PositionOrCurve[]>;
            required: true;
        };
        path: {
            type: PropType<Path>;
            required: true;
        };
    }, {
        props: Readonly<{
            path: Path;
            points: PositionOrCurve[];
        }>;
        scale: Ref<number>;
        pathConfig: PathConfig<Path>;
        d: ComputedRef<string>;
        config: ComputedRef<PathStrokeStyle>;
        strokeDasharray: ComputedRef<string | number | undefined>;
        animationSpeed: ComputedRef<string | undefined>;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<{
        points?: unknown;
        path?: unknown;
    } & {
        path: Path;
        points: PositionOrCurve[];
    } & {}>, {}>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<{
    paths?: unknown;
    edges?: unknown;
} & {
    edges: Edges;
    paths: Paths;
} & {}>, {}>;
export default _sfc_main;
