import { Ref } from "vue";
import { Emitter } from "mitt";
import { Reactive, ReadonlyRef } from "../common/common";
import { Events, NodePositions } from "../common/types";
import { EdgeStates, NodeStates } from "./state";
declare type NodeEventHandler = (node: string, event: PointerEvent) => void;
declare type EdgeEventHandler = (edge: string, event: PointerEvent) => void;
interface MouseEventHandlers {
    selectedNodes: Reactive<Set<string>>;
    hoveredNodes: Reactive<Set<string>>;
    selectedEdges: Reactive<Set<string>>;
    hoveredEdges: Reactive<Set<string>>;
    handleNodePointerDownEvent: NodeEventHandler;
    handleNodePointerOverEvent: NodeEventHandler;
    handleNodePointerOutEvent: NodeEventHandler;
    handleEdgePointerDownEvent: EdgeEventHandler;
    handleEdgePointerOverEvent: EdgeEventHandler;
    handleEdgePointerOutEvent: EdgeEventHandler;
}
export declare function provideMouseOperation(container: Ref<SVGElement | undefined>, nodePositions: Readonly<NodePositions>, zoomLevel: ReadonlyRef<number>, nodeStates: NodeStates, edgeStates: EdgeStates, selectedNodes: Reactive<Set<string>>, selectedEdges: Reactive<Set<string>>, hoveredNodes: Reactive<Set<string>>, hoveredEdges: Reactive<Set<string>>, emitter: Emitter<Events>): MouseEventHandlers;
export declare function useMouseOperation(): MouseEventHandlers;
export {};
