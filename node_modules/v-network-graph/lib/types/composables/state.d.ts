import { ComputedRef, Ref, UnwrapRef } from "vue";
import { WatchStopHandle } from "vue";
import { Reactive } from "../common/common";
import { Configs, MarkerStyle } from "../common/configs";
import { ShapeStyle, NodeLabelStyle, StrokeStyle } from "../common/configs";
import { Edges, Layouts, Nodes } from "../common/types";
import { LinePosition, Position } from "../common/types";
import { EdgeGroupStates } from "../common/edge-group";
import * as V from "../common/vector";
export type { EdgeGroupStates };
interface NodeStateDatum {
    shape: Ref<ShapeStyle>;
    staticShape: Ref<ShapeStyle>;
    label: Ref<NodeLabelStyle>;
    labelText: Ref<string>;
    selected: boolean;
    hovered: boolean;
    draggable: Ref<boolean>;
    selectable: Ref<boolean | number>;
}
export declare type NodeState = UnwrapRef<NodeStateDatum>;
export declare type NodeStates = Record<string, NodeState>;
interface Line {
    stroke: StrokeStyle;
    normalWidth: number;
    source: MarkerStyle;
    target: MarkerStyle;
}
export interface Curve {
    center: V.Vector;
    theta: number;
    circle: {
        center: V.Vector;
        radius: number;
    };
    control: Position[];
}
interface EdgeStateDatum {
    line: Ref<Line>;
    selectable: Ref<boolean | number>;
    selected: boolean;
    hovered: boolean;
    origin: LinePosition;
    labelPosition: LinePosition;
    position: LinePosition;
    curve?: Curve;
    sourceMarkerId?: string;
    targetMarkerId?: string;
    stopWatchHandle: WatchStopHandle;
}
export declare type EdgeState = UnwrapRef<EdgeStateDatum>;
export declare type EdgeStates = Record<string, EdgeState>;
interface States {
    nodeStates: NodeStates;
    edgeStates: EdgeStates;
    edgeGroupStates: EdgeGroupStates;
    layouts: Layouts;
}
export declare type ReadonlyStates = Readonly<States>;
export declare function provideStates(nodes: Readonly<Nodes>, edges: Readonly<Edges>, selectedNodes: Reactive<Set<string>>, selectedEdges: Reactive<Set<string>>, hoveredNodes: Reactive<Set<string>>, hoveredEdges: Reactive<Set<string>>, configs: Readonly<Configs>, layouts: Reactive<Layouts>, scale: ComputedRef<number>): {
    nodeStates: NodeStates;
    edgeStates: EdgeStates;
    edgeGroupStates: Reactive<EdgeGroupStates>;
    layouts: Reactive<Layouts>;
};
export declare function useStates(): Readonly<States>;
